#!/usr/bin/env python3
# editor width: 100   -----------------------------------------------------------------------------

###  wyng-util-qubes
###  Copyright Christopher Laprise 2023 / tasket@protonmail.com
###  Licensed under GNU General Public License v3. See file 'LICENSE'.

print("wyng-util-qubes v0.2alpha rel 20230128.2")

import qubesadmin, sys, os, shutil, subprocess, argparse
from qubesadmin.backup.core3 import Core3Qubes

b2i     = lambda b: int.from_bytes(b, byteorder="big")
exists  = os.path.exists

# Exit with simple message
def x_it(code, text):
    sys.stderr.write(text+"\n")
    #cleanup()
    shutil.rmtree(tmpdir)
    sys.exit(code)


# Get archive directory
def get_wyng_directory(pass_agent):
    # Parse full vol/session list into lookup tables...
    # wvolsessionmap:  session -> volume_name
    # wsessionqubes :  session -> qube_name
    # wvolumemap    :  volume_name -> session
    # qube_wvolmap  :  qube_name -> volume_suffix ('root' or 'private')

    pass_agent = max(pass_agent, 5 if options.action not in ("list","backup") else 0)
    wvolsessionmap, wvolumemap, qube_wvolmap = {}, {}, {}   ; volname = qubename = None
    wyng_cmd = ["wyng", "-u", "--verbose", "--all", "--pass-agent="+str(pass_agent), "list"]
    if options.metadir: wyng_cmd.insert(1, "--meta-dir="+options.metadir)
    for ln1 in subprocess.check_output(wyng_cmd, text=True).splitlines():
        if ln1.startswith("Sessions for volume"):
            ln2 = ln1.split("'")
            if len(ln2)>2 and ln2[-1] == ":":
                volname  = ln2[1]    ; wvolumemap[volname] = []
        elif len(ln1)==15 and ln1[8]=="-" and ln1[:8].isnumeric() and volname:
            wvolumemap[volname].append(ln1)
            if ln1 not in wvolsessionmap:
                wvolsessionmap[ln1] = set(volname)
            else:
                wvolsessionmap[ln1].add(volname)
    wsessionqubes = {}
    for ses,vols in wvolsessionmap.items():
        if s := set((get_qubename(x)[0] for x in vols if x.endswith(("-root","-private")))):
            wsessionqubes[ses] = s

    # make qube_wvolmap...
    for vol in (x for x in wvolumemap if x.startswith("vm-")):
        qubename, suffix = get_qubename(vol)
        if qubename not in qube_wvolmap:   qube_wvolmap[qubename] = set()
        qube_wvolmap[qubename].add(suffix)

    return wvolsessionmap, wvolumemap, wsessionqubes, qube_wvolmap


def get_qubename(volname):
    if not volname.startswith("vm-") or not volname.endswith(("-root","-private")):
        return "",""
    return volname.partition("vm-")[-1].rsplit("-",maxsplit=1)


if sys.hexversion < 0x3080000:
    x_it(1, "Python ver. 3.8 or greater required.")

# Root user required
if os.getuid() > 0:
    x_it(1, "Must be root user.")


# Parse Arguments

parser = argparse.ArgumentParser(description="")
parser.add_argument("action", choices=("backup","restore","prune","list"),
                    help="Action to take")
parser.add_argument("--session", help="YYYYMMDD-HHMMSS[,YYYYMMDD-HHMMSS]"
                                 " select session date, singular or range.")
parser.add_argument("--dedup", "-d", action="store_true", default=False,
                    help="Data deduplication (backup)")
parser.add_argument("--autoprune", default="off",
                    help="Automatic pruning")
parser.add_argument("--all-before", dest="allbefore", action="store_true", default=False,
                    help="Select all sessions before --session date-time.")
parser.add_argument("--pass-agent", type=int, default=0,
                    help="Minutes to retain passphrase (0)")
parser.add_argument("--local", default="qubes_dom0/vm-pool",
                    help="Override qubes_dom0/vm-pool local storage default")
parser.add_argument("--meta-dir", dest="metadir", default="", help="Use alternate metadata path")
parser.add_argument("volumes", nargs="*")
options = parser.parse_args()    ; options.action = options.action.lower()

#if len(sys.argv) < 3 or sys.argv[1].lower() not in ("backup","restore"):
    #x_it(1, "Usage:\n"
            #"wyng-util-qubes backup <qube_name [qube_name...]>\n"
            #"wyng-util-qubes restore <qube_name [qube_name...]>")


## CONSTANTS / GLOBALS ##

lvmvolgrp, lvmpool = options.local.split("/")         ; lvmode = True
mvolname   = "wyng-qubes-metadata"     ; mvolpath = "/dev/"+lvmvolgrp+"/"+mvolname
qubesvar   = "/var/lib/qubes/"         ; qubesxml = "qubes.xml"    ; fwfile = "firewall.xml"
tmpdir     = "/tmp/wyng-util-qubes"    ; tarpath  = tmpdir+"/qmeta.tgz"
selected   = options.volumes           ; pass_agent = options.pass_agent
qdaemon    = qubesadmin.Qubes().app    ; live_qubes = qdaemon.domains   
err_domains= []

if os.path.exists(tmpdir):   shutil.rmtree(tmpdir)
os.makedirs(tmpdir)

if options.action != "backup":
    wvolsessionmap, wvolumemap, wsessionqubes, qube_wvolmap = get_wyng_directory(pass_agent)


# Process Actions
if options.action == "backup":

    vols = []
    for vm in (x for x in selected if x in live_qubes):
        if vm == "dom0":
            print("Skipping dom0.")
            continue
        vols.append("vm-"+vm+"-private")
        if "template" not in live_qubes[vm].property_list():   vols.append("vm-"+vm+"-root")

    #Enh: Use include_in_backups property
    if not vols:   raise ValueError("Please supply a list of Qubes VMs to backup.")

    ## Copy the Qubes metadata volume and add it to Wyng archive
    os.chdir(qubesvar)
    subprocess.run(["tar", "-czf", tarpath, "--exclude=*img", "qubes.xml",
                    "appvms", "vm-templates"], check=True)
    tarsize = os.path.getsize(tarpath)

    ## Initialize metadata volume
    if lvmode:
        if os.path.exists(mvolpath):
            subprocess.run(["lvm", "lvremove", "-q", "-f", mvolpath],
                           stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL, check=True)

        subprocess.run(["lvm", "lvcreate", "-q", "-prw", "-ay", "-kn",
                        "-V", str(tarsize//1024+1)+"K", "--thin",
                        "-n", mvolname, lvmvolgrp+"/"+lvmpool],
                        stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL, check=True)

        subprocess.run(["dd", "if="+tarpath, "of="+mvolpath, "status=none"], check=True)
    else:
        raise NotImplementedError()
        #cp tarpath ???

    wyng_cmd = ["wyng", "-u", "--pass-agent="+str(pass_agent), "send", mvolname] + vols
    if options.dedup:   wyng_cmd.insert(1, "-d")
    if options.metadir: wyng_cmd.insert(1, "--meta-dir="+options.metadir)
    subprocess.run(wyng_cmd, check=True)


elif options.action == "restore":
    ## Restore Qubes VMs with settings

    if not selected or not options.session:
        raise ValueError("Please supply a session and a list of Qubes VMs to restore.")

    # Receive metadata
    pa_required = max(pass_agent, 5)
    wyng_cmd = ["wyng", "-u", "--quiet", "--pass-agent="+str(pa_required), "--save-to="+tarpath,
                "--session="+options.session, "receive", mvolname]
    if options.metadir: wyng_cmd.insert(1, "--meta-dir="+options.metadir)
    subprocess.run(wyng_cmd, check=True)
    if not os.path.exists(mvolpath):   raise RuntimeError(mvolpath+" not found.")

    #Enh: get archive listing and check volume presence vs selected qube list
    os.chdir(tmpdir)
    subprocess.run(["tar", "-xzf", tarpath], check=True)
    backups = Core3Qubes(tmpdir+"/"+qubesxml).domains

    # Match VM selections to backed-up volumes
    lvolumes  = []
    templates = [x for x in backups.values() if x.klass == "TemplateVM" and x.name in selected]
    appvms    = [x for x in backups.values()
                 if x not in templates and x.name in selected and x.name != "dom0"]
    if "dom0" in selected:   print("Skipping dom0.")

    for qube in templates + appvms:
        target = qube.name

        # Find local qube or create one
        if target in (x.name for x in live_qubes):
            target_qube = live_qubes[target]
            if target_qube.klass != qube.klass:
                sys.stderr.write("Class mismatch %s vs %s for qube named '%s'.\n"
                                 % (target_qube.klass, qube.klass, qube.name))
                err_domains.append(qube.name)
            elif not target_qube.is_halted():
                target_qube.kill()
        else:
            target_qube = qdaemon.add_new_vm(qube.klass, label=qube.label, name=target,
                                             template=qube.template)

        target_qube.tags.add("restore_incomplete")
        lvolumes.append("vm-"+target+"-private")
        if qube in templates:   lvolumes.append("vm-"+target+"-root")

    print("Warning:  Restoring to existing VMs will overwrite them.")
    if input("Continue [y/N]? ").lower() not in ("y","yes"):   sys.exit(0)

    # Restore data volumes
    #Fixme: catch retcode 2 for specific volumes
    #Enh: allow restoring incomplete set of data
    wyng_cmd = ["wyng", "-u", "--sparse-write", "--pass-agent="+str(pass_agent),
                "--session="+options.session, "receive"] + lvolumes
    if options.metadir: wyng_cmd.insert(1, "--meta-dir="+options.metadir)
    p = subprocess.run(wyng_cmd, text=True, stderr=subprocess.PIPE)
    if p.returncode == 2:
        errln = [x.partition("volumes(s)") for x in p.stdout.splitlines() if "volumes(s):" in x]
        err_domains.extend(errln.split())
        sys.stderr.write("(Wyng) "+"".join(errln)+"\n")
    elif p.returncode > 0:
        raise CalledProcessError(p.stderr)

    # Selectively restore qube properties
    # Remove or reset properties that are not in the backup metadata
    for qube in templates + appvms:
        target = qube.name    ; target_qube = live_qubes[target]
        subdir = "vm-templates/" if qube.klass == "TemplateVM" else "appvms/"

        if exists(subdir+qube.name+"/"+fwfile):
            shutil.copyfile(subdir+qube.name+"/"+fwfile, qubesvar+subdir+target+"/"+fwfile)
        elif exists(qubesvar+subdir+target+"/"+fwfile):
            os.remove(qubesvar+subdir+target+"/"+fwfile)

        for prop in set(qube.properties) | set(target_qube.property_list()):
            if prop in ("dispid","installed_by_rpm","default_dispvm","qid","uuid","xid","klass",
                        "template","name","label","backup_timestamp","ip","ip6",
                        "stubdom_mem","stubdom_xid"):
                continue

            if prop in qube.properties:
                pval = qube.properties[prop]
                try:
                    setattr(target_qube, prop, pval)
                except Exception as err:
                    print("Error setting %s.%s to %s: %s" % (qube.name, prop, pval, err))
                    err_domains.append(qube.name)
            else:
                propdef = target_qube.property_get_default(prop)
                try:
                    setattr(target_qube, prop, propdef)
                except Exception as err:
                    if "cannot be set" not in repr(err):
                        print("Error:", prop, propdef)   ; err_domains.append(qube.name)

        for prop, pval in qube.features.items():   target_qube.features[prop] = pval
        for prop in (x for x in target_qube.features if x not in qube.features):
            del(target_qube.features[prop])

        for bus in target_qube.devices:
            busobj  = target_qube.devices[bus]
            devlist = list(busobj.assignments())
            for dev in devlist:   busobj.detach(dev)
        for bus in qube.devices:
            for backend_domain, ident in qube.devices[bus]:
                options = qube.devices[bus][(backend_domain, ident)]
                assignment = qubesadmin.devices.DeviceAssignment(backend_domain=backend_domain,
                                                    ident=ident, options=options, persistent=True)
                try:
                    target_qube.devices[bus].attach(assignment)
                except Exception as err:
                    print("Error attaching device %s:%s to %s: %s" % (bus,ident,qube.name,err))
                    err_domains.append(qube.name)

        for tag in qube.tags:   target_qube.tags.add(tag)
        for tag in (x for x in target_qube.tags if x not in qube.tags):
            target_qube.tags.remove(tag)

        if "restore_incomplete" in target_qube.tags and target not in err_domains:
            target_qube.tags.remove("restore_incomplete")


elif options.action == "prune":
    raise NotImplementedError()


elif options.action == "list":
    if options.session:
        print("Qubes in session", options.session+":")
        for qube in wsessionqubes[options.session]:
            flag = "*" if mvolname not in wvolsessionmap[options.session] else ""
            print(" ", qube, flag)
    elif selected:
        for qube in selected:
            print("Sessions with qube "+qube+":")
            print("  ".join(sorted((x for x,y in wsessionqubes.items()
                                    if qube in y and mvolname in wvolsessionmap[x])
                  )))
            print()
    else:
        print("Archived sessions:")
        print("  ".join((x for x in sorted(wsessionqubes) if mvolname in wvolsessionmap[x])
              ))


# Cleanup
if err_domains:   x_it(2, "Errors for VMs: "+" ".join(err_domains))
