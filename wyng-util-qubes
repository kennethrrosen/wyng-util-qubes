#!/usr/bin/env python3
# editor width: 100   -----------------------------------------------------------------------------

###  wyng-util-qubes
###  Copyright Christopher Laprise 2023 / tasket@protonmail.com
###  Licensed under GNU General Public License v3. See file 'LICENSE'.

print("wyng-util-qubes v0.7beta rel 20230721")

import qubesadmin, sys, os, shutil, subprocess, argparse, json
from qubesadmin.backup.core3 import Core3Qubes

exists  = os.path.exists

def b2i(b):   return int.from_bytes(b, byteorder="big")

def err_out(text):   sys.stderr.write(text+"\n")

# Exit with simple message
def x_it(code, text):
    err_out(text)
    #cleanup()
    shutil.rmtree(tmpdir)
    sys.exit(code)


# Get archive directory
def get_wyng_directory():
    # Parse full vol/session list into lookup tables...
    # wvolsessionmap:  session -> volume_name
    # wsessionqubes :  session -> qube_name
    # wvolumemap    :  volume_name -> session
    # qube_wvolmap  :  (dict)qube_name -> (dict)session -> (set)volume_suffix ('root' or 'private')

    wvolsessionmap, wvolumemap, qube_wvolmap = {}, {}, {}   ; volname = qubename = None
    wyng_cmd = w_options + ["--json", "list"]
    jdata = json.loads((j := run(["wyng"]+wyng_cmd, text=True).stdout)[j.find("{"):])

    for volname, sname in ((vk,sk) for vk,vv in jdata["volumes"].items() for sk in vv["sessions"]):
        wvolumemap.setdefault(volname, list()).append(sname[2:])
        wvolsessionmap.setdefault(sname[2:], set()).add(volname)

    wsessionqubes = {}
    for ses,vols in wvolsessionmap.items():
        if s := set((get_qubename_parts(x)[1] for x in vols
                     if x.endswith(("-root","-private","/root.img","/private.img")))):
            wsessionqubes[ses] = s

    # make qube_wvolmap...
    for vol, ses in ((x,s) for x,y in wvolumemap.items() for s in y 
                     if x.startswith(("vm-","appvms/","vm-templates/"))):
        prefix, qubename, suffix = get_qubename_parts(vol)
        qube_wvolmap.setdefault(qubename, dict()).setdefault(ses, set()).add(suffix)

    return jdata, wvolsessionmap, wvolumemap, wsessionqubes, qube_wvolmap


def get_qubes_metadata(session):
    # Receive metadata
    wyng_cmd = w_options + ["-u", "--quiet",
                            "--save-to="+tarpath, "--session="+session, "receive", mvolname]
    result = run(["wyng"]+wyng_cmd, check=True)

    #Enh: get archive listing and check volume presence vs selected qube list
    result = run(["tar", "-xzf", tarpath], cwd=tmpdir, check=True)
    return Core3Qubes(tmpdir+"/"+qubesxml).domains


def get_qubename_parts(n):
    if n.startswith("vm-") and n.endswith(("-root","-private")):
        return ["vm"] + n.partition("vm-")[-1].rsplit("-",maxsplit=1)
    elif n.startswith(("appvms/","vm-templates/")) and n.endswith(("/root.img","/private.img")):
        return ((t := n.split("/"))[0], "/".join(t[1:-1]), t[-1])
    else:
        return "","",""


def handle_wyng_vol_error(p):
    errln = [x.partition("volumes(s)") for x in p.stdout.splitlines() if "volumes(s):" in x]
    err_domains.extend(errln.split())
    err_out("(Wyng) "+"".join(errln))


def run(cmd, check=True, **kwargs):
    capt   = not ("stderr" in kwargs or "stout" in kwargs)
    result = subprocess.run(cmd, capture_output=capt, **kwargs)
    if check and result.returncode:
        err_out(f"{result.stdout}\n{result.stderr}")
        sys.exit(result.returncode)
    return result


def err_out(text):
    sys.stderr.write(text+"\n")



##  MAIN  ##

if sys.hexversion < 0x3080000:
    x_it(1, "Python ver. 3.8 or greater required.")

# Root user required
if os.getuid() > 0:
    x_it(1, "Must be root user.")


# Parse Arguments

parser = argparse.ArgumentParser(description="")
parser.add_argument("action", choices=("backup","restore","verify","prune","delete","list"),
                    help="Action to take")
parser.add_argument("--session", help="YYYYMMDD-HHMMSS[,YYYYMMDD-HHMMSS]"
                                 " select session date, singular or range.")
parser.add_argument("--dedup", "-d", action="store_true", default=False,
                    help="Data deduplication. (backup)")
parser.add_argument("--includes", "-i", action="store_true", default=False,
                    help="Select VMs marked 'include in backups' (backup)")
parser.add_argument("--exclude", action="append", default=[],
                    help="VM name to exclude. (backup)")
parser.add_argument("--volume", action="append", default=[],
                    help="Extra logical volume to include.")
parser.add_argument("--autoprune", default=None,
                    help="Automatic pruning: off/on/full. (backup, prune)")
parser.add_argument("--all-before", dest="allbefore", action="store_true", default=False,
                    help="Select all sessions before --session date-time.")
parser.add_argument("--local", default="qubes_dom0/vm-pool",
                    help="Override qubes_dom0/vm-pool local storage default.")
parser.add_argument("--dest", help="URL location of archive.")
parser.add_argument("-w", dest="wyngopt", action="append", default=[],
                    help="Pass an option to Wyng directly.")
parser.add_argument("--unattended", "-u", action="store_true", default=False,
                    help="Unattended operation")
parser.add_argument("--meta-dir", dest="metadir", default="", help="Use alternate metadata path.")
parser.add_argument("qubenames", nargs="*")
options = parser.parse_args()    ; options.action = options.action.lower()
options.unattended = options.unattended or not sys.stdin.isatty()


## CONSTANTS / GLOBALS ##

lvmvolgrp, lvmpool = options.local.split("/")         ; lvmode = True
mvolname   = "wyng-qubes-metadata"     ; mvolpath   = "/dev/"+lvmvolgrp+"/"+mvolname
qubesvar   = "/var/lib/qubes/"         ; qubesxml   = "qubes.xml"    ; fwfile = "firewall.xml"
tmpdir     = "/tmp/wyng-util-qubes"    ; tarpath    = tmpdir+"/qmeta.tgz"
qdaemon    = qubesadmin.Qubes().app    ; live_qubes = qdaemon.domains   
selected   = options.qubenames         ; err_domains= []

if os.path.exists(tmpdir):   shutil.rmtree(tmpdir)
os.makedirs(tmpdir)

w_options = []
if options.local:      w_options.append("--local="+options.local)
if options.dest:       w_options.append("--dest="+options.dest)
if options.metadir:    w_options.append("--meta-dir="+options.metadir)
if options.unattended: w_options.append("-u")
w_options.extend(["--"+x for x in options.wyngopt])


arch_mdata, wvolsessionmap, wvolumemap, wsessionqubes, qube_wvolmap = get_wyng_directory()


# Process Actions
if options.action == "backup":

    vols     = []
    includes = [x.name for x in live_qubes if x.include_in_backups and options.includes]
    for vm in sorted(set(selected+includes)):
        if vm == "dom0" or vm not in live_qubes or vm in options.exclude:
            print("Skipping", vm)
            continue
        vols.append("vm-"+vm+"-private") ####  Obtain vol name from Qubes API
        if "template" not in live_qubes[vm].property_list():   vols.append("vm-"+vm+"-root") ####

    vols += options.volume
    if not vols:   raise ValueError("Please supply a list of Qubes VMs or --volume to backup.")

    ## Copy the Qubes metadata volume and add it to Wyng archive
    os.chdir(qubesvar)
    run(["tar", "-czf", tarpath, "--exclude=*img", "--exclude=*wyng?", "qubes.xml",
         "appvms", "vm-templates"])
    tarsize = os.path.getsize(tarpath)

    ## Initialize metadata volume ### ###
    if lvmode:
        if os.path.exists(mvolpath):
            run(["lvm", "lvremove", "-q", "-f", mvolpath])

        run(["lvm", "lvcreate", "-q", "-prw", "-ay", "-kn",
                        "-V", str(tarsize//1024+1)+"K", "--thin",
                        "-n", mvolname, lvmvolgrp+"/"+lvmpool])

        run(["dd", "if="+tarpath, "of="+mvolpath, "status=none"])
    else:
        raise NotImplementedError()
        #cp tarpath ???

    wyng_cmd = w_options + ["send", mvolname] + vols
    if options.autoprune:  wyng_cmd.insert(0, "--autoprune="+options.autoprune)
    if options.dedup:      wyng_cmd.insert(0, "-d")
    p = run(["wyng"]+wyng_cmd, stdout=sys.stdout, stderr=sys.stderr)


elif options.action == "restore":
    ## Restore Qubes VMs with settings

    if not options.session:
        raise ValueError("Please specify a session to restore.")

    backups  = get_qubes_metadata(options.session)
    selected = set(selected or wsessionqubes[options.session]) - set(options.exclude)
    os.chdir(tmpdir)

    # Match VM selections to backed-up volumes
    lvolumes  = []
    templates = [x.name for x in backups.values() if x.klass== "TemplateVM" and x.name in selected]
    appvms    = [x.name for x in backups.values()
                 if x.name not in templates and x.name in selected and x.name != "dom0"]
    if "dom0" in selected:   print("Skipping dom0.")
    for vm in selected - set(templates + appvms):
        if vm in wsessionqubes[options.session]:
            err_out(f"Skipping {vm} (No metadata)")    ; err_domains.append(vm)

    for target in templates + appvms:
        qube = backups[target]

        # Find local qube or create one
        if target in (x.name for x in live_qubes):
            target_qube = live_qubes[target]
            if target_qube.klass != qube.klass:
                err_out("Class mismatch %s vs %s for qube named '%s'."
                        % (target_qube.klass, qube.klass, qube.name))
                err_domains.append(qube.name)
            elif not target_qube.is_halted():
                target_qube.kill()
        else:
            target_qube = qdaemon.add_new_vm(qube.klass, label=qube.label, name=target,
                                             template=qube.template)

        target_qube.tags.add("restore_incomplete")
        lvolumes.append("vm-"+target+"-private") ####
        if target in templates:   lvolumes.append("vm-"+target+"-root") ####

    if not options.unattended:
        print("Warning:  Restoring to existing VMs will overwrite them.")
        if input("Continue [y/N]? ").lower() not in ("y","yes"):   sys.exit(0)

    # Restore data volumes
    #Enh: allow restoring incomplete set of data
    wyng_cmd = w_options + ["-u", "--sparse-write",
                "--session="+options.session, "receive"] + lvolumes + options.volume
    p = run(["wyng"]+wyng_cmd, text=True, check=False, stderr=subprocess.PIPE)
    if p.returncode == 2:
        handle_wyng_vol_error(p)
    elif p.returncode > 0:
        raise subprocess.CalledProcessError(p.returncode, p.stderr)

    # Selectively restore qube properties
    # Remove or reset properties that are not in the backup metadata
    for target in templates + appvms:
        qube = backups[target]    ; target_qube = live_qubes[target]
        subdir = "vm-templates/" if qube.klass == "TemplateVM" else "appvms/"

        if exists(subdir+qube.name+"/"+fwfile):
            shutil.copyfile(subdir+qube.name+"/"+fwfile, qubesvar+subdir+target+"/"+fwfile)
        elif exists(qubesvar+subdir+target+"/"+fwfile):
            os.remove(qubesvar+subdir+target+"/"+fwfile)

        for prop in set(qube.properties) | set(target_qube.property_list()):
            if prop in ("dispid","installed_by_rpm","default_dispvm","qid","uuid","xid","klass",
                        "template","name","label","backup_timestamp","ip","ip6",
                        "stubdom_mem","stubdom_xid"):
                continue

            if prop in qube.properties:
                pval = qube.properties[prop]
                try:
                    setattr(target_qube, prop, pval)
                except Exception as err:
                    print("Error setting %s.%s to %s: %s" % (qube.name, prop, pval, err))
                    err_domains.append(qube.name)
            else:
                propdef = target_qube.property_get_default(prop)
                try:
                    setattr(target_qube, prop, propdef)
                except Exception as err:
                    if "cannot be set" not in repr(err):
                        print("Error:", prop, propdef)   ; err_domains.append(qube.name)

        for prop, pval in qube.features.items():   target_qube.features[prop] = pval
        for prop in (x for x in target_qube.features if x not in qube.features):
            del(target_qube.features[prop])

        for bus in target_qube.devices:
            busobj  = target_qube.devices[bus]
            devlist = list(busobj.assignments())
            for dev in devlist:   busobj.detach(dev)
        for bus in qube.devices:
            for backend_domain, ident in qube.devices[bus]:
                options = qube.devices[bus][(backend_domain, ident)]
                assignment = qubesadmin.devices.DeviceAssignment(backend_domain=backend_domain,
                                                    ident=ident, options=options, persistent=True)
                try:
                    target_qube.devices[bus].attach(assignment)
                except Exception as err:
                    print("Error attaching device %s:%s to %s: %s" % (bus,ident,qube.name,err))
                    err_domains.append(qube.name)

        for tag in qube.tags:   target_qube.tags.add(tag)
        for tag in (x for x in target_qube.tags if x not in qube.tags):
            target_qube.tags.remove(tag)

        if "restore_incomplete" in target_qube.tags and target not in err_domains:
            target_qube.tags.remove("restore_incomplete")


elif options.action == "verify":
    assert options.session
    backups  = get_qubes_metadata(options.session)
    selected = set(selected or wsessionqubes[options.session]) - set(options.exclude)
    if not selected:   x_it(1, "No matching contents")

    lvolumes = [f"vm-{vm}-{suffix}" for vm,ses_d in qube_wvolmap.items() ####
                                        for ses,suflst in ses_d.items() for suffix in suflst
                                        if vm in selected and ses==options.session]

    wyng_cmd = w_options + ["--session="+options.session, "verify"] \
             + [mvolname] + lvolumes + options.volume
    p = run(["wyng"]+wyng_cmd, text=True, check=False, stderr=subprocess.PIPE)
    if p.returncode == 2:
        handle_wyng_vol_error(p)
    elif p.returncode > 0:
        raise CalledProcessError(p.stderr)

    for vm in selected:
        if vm not in backups.keys():
            err_out(f"No settings metadata for qube {vm}.")    ; err_domains.append(vm)


elif options.action == "prune":
    assert options.session or options.autoprune and not options.exclude
    #Enh: pass exclude vols to wyng --volex

    lvolumes = [] if not selected else [f"vm-{vm}-{suffix}" for vm,ses_d in qube_wvolmap.items() 
                                        for ses,suflst in ses_d.items() for suffix in suflst
                                        if vm in selected and ses==options.session]

    wyng_cmd = w_options + ["prune"] + lvolumes + options.volume
    if options.session: wyng_cmd.insert(0, "--session="+options.session)
    if options.allbefore: wyng_cmd.insert(0, "--all-before")
    if options.autoprune: wyng_cmd.insert(0, "--autoprune="+options.autoprune)
    run(["wyng"]+wyng_cmd, text=True, stderr=subprocess.PIPE)


elif options.action == "delete":
    assert len(selected) == 1
    lvolumes = [f"vm-{vm}-{suffix}" for vm,ses_d in qube_wvolmap.items() 
                                        for ses,suflst in ses_d.items() for suffix in suflst
                                        if vm in selected]
    for vol in lvolumes + options.volume:
        wyng_cmd = w_options + ["delete", vol]
        run(["wyng"]+wyng_cmd)


elif options.action == "list":
    if options.session:
        print("\nQubes in session", options.session+":")
        for qube in wsessionqubes[options.session]:
            flag = "*" if mvolname not in wvolsessionmap[options.session] else ""
            print(" ", qube, flag)
    elif selected:
        for qube in selected:
            print("\nSessions with qube "+qube+":")
            print("  ".join(sorted((x for x,y in wsessionqubes.items()
                                    if qube in y and mvolname in wvolsessionmap[x])
                  )))
            print()
    else:
        print("\nArchived sessions:")
        print("  ".join((x for x in sorted(wsessionqubes) if mvolname in wvolsessionmap[x])
              ))


# Cleanup
if err_domains:   x_it(2, "\nErrors for VMs: "+" ".join(err_domains))
